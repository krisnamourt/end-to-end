name: prd-pipeline
on: 
  push:
    branches:
      - master


env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1

jobs:
  # docker-validate:
  #   timeout-minutes: 12
  #   runs-on: ubuntu-18.04
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2  
  #   - name: Static validate
  #     run: docker run --rm -i hadolint/hadolint < Dockerfile 
  #   - name: Build Image
  #     run: docker build  -t image-test .
  #   - name: Run Trivy vulnerability scanner
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       image-ref: 'image-test:latest'
  #       format: 'table'
  #       exit-code: '1'
  #       ignore-unfixed: true
  #       severity: 'CRITICAL,HIGH'

  # terraform-validate:
  #   timeout-minutes: 12
  #   runs-on: ubuntu-18.04
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2  
  #   - uses: actions/setup-python@v1
  #   - uses: BSFishy/pip-action@v1
  #     with: 
  #       packages: checkov 
  #   - run: checkov -d .github/terraform/
  #   - name: Terraform Init & Validate
  #     run: cd .github/terraform && terraform init && terraform validate

  deploy:
    # needs: [docker-validate,terraform-validate]
    timeout-minutes: 12
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2   
    - name: Terraform Deploy
      run: |
        cd .github/terraform && terraform init && terraform apply --auto-approve    
        export $(cat terraform/.env | xargs)

    - name: Image Build and Push
      uses: kciter/aws-ecr-action@master
      with:
        access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        account_id: 978827181454
        repo: python-api
        region: ${{ env.AWS_REGION }}
        tags: ${{ env.GITHUB_SHA }}
        create_repo: false
    - name: Install ecs-cli
      run: |
        cat $ecr
        cat ${{ env.ecr }}
        sudo curl -o /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest \
        && sudo chmod 775 /usr/local/bin/ecs-cli
    - name: Deploy Application
      run: |
        sed -i "s|app_name|elb-python-api|" .github/ecs/ecs-compose.yml
        sed -i "s|image_app|$image_name|" .github/ecs/ecs-compose.yml
        sed -i "s|tsk_role|${{ env.ecs_role }}|" .github/ecs/ecs-compose.yml
        sed -i "s|exec_role|${{ env.ecs_role }}|" .github/ecs/ecs-compose.yml

        ecs-cli compose --project-name elb-python-api -f .github/ecs/ecs-compose.yml --ecs-params .github/ecs/ecs-params.yml -c $cluster --region $AWS_REGION service up --launch-type FARGATE --create-log-groups --target-group-arn $target_arn --container-name api --container-port 8000 --timeout 10
      env:
        image_name: ${{ env.ecr }}/python-api:${{ env.GITHUB_SHA }}
        cluster: ${{ env.cluster }}        